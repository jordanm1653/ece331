===============================================================================
Jordan Millington
Homework 2
ECE 331
Due: 01/28/2015
===============================================================================

2.1
----------------------------------------
A) /etc contains all system related configuration files.
B) /bin
C) /var/log
D) /dev/null is a device that discards all data written to it
E) A device file is an interface for a device

2.2
----------------------------------------
/*
 * fsum.c
 *
 * Jordan Millington
 * Homework 2:2
 * ece331
 */

/* Pre-processor Includes */
#include<sys/types.h>
#include<sys/stat.h>
#include<stdio.h>
#include<stdlib.h>

/* Usage Function */
void print_usage()
{
	printf("\nUsage: fsum <file 1> <file 2> <file ...>\n");
	printf("\t<file (#)>:\tFilename\n\n");
	printf("Only regular files accepted!\n\n");
}
int main(int argc, char *argv[])
{
	struct stat sb;
	int i = 0;
	long long sum_fsize = 0;
	/* Validity Checking */
	if (argc < 2){
		printf("\nMust pass atleast 1 file!\n");
		print_usage();
		exit(EXIT_FAILURE);
	}

	for (i = 1; i < argc; i++){
		if ((stat(argv[i], &sb)) == -1){
			perror("stat");
			exit(EXIT_FAILURE);
		}else if ((sb.st_mode & S_IFMT) != S_IFREG){
			printf("Error: \"%s\" is not an acceptable filetype\n",
			       argv[i]);
			print_usage();
			exit (EXIT_FAILURE);
		}else{
			sum_fsize = sum_fsize + ((long long) sb.st_size);
		}
	}

	printf("%lld\n", sum_fsize);


	return 0;
}

2.3
----------------------------------------
/*
 * gsum.c -- print total number of bytes used by files returned from a
 * single glob passed on the command line
 *
 * Jordan Millington
 * Homework 2:3
 * ece331
 *
 * Last Modified:
 * 01/29/2015
 */
#include<sys/types.h>
#include<sys/stat.h>
#include<errno.h>
#include<glob.h>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>

/* Usage Function */
void print_usage(char **argv)
{
	printf("Usage: %s \"<glob>\"\n", argv[0]);
}
int main(int argc, char *argv[])
{
	/* declare glob struct */
	glob_t globbuf;
	/* declare stat struct */
	struct stat sb;
	long long fsum = 0;
	int i = 0;

	if (argc != 2){
		print_usage(argv);
		exit(EXIT_FAILURE);
	}

	if((glob(argv[1], 0, NULL, &globbuf)) != 0){
		perror("glob");
		exit(EXIT_FAILURE);
	}

	/* Pass glob files to stat() and check for errors */
	for (i = 0; i < globbuf.gl_pathc; i++){
		if ((stat(globbuf.gl_pathv[i], &sb)) == -1){
			perror("stat");
			exit(EXIT_FAILURE);
		/* Only accept regular filetypes */
		}else if ((sb.st_mode & S_IFMT) != S_IFREG){
			printf("Error: \"%s\" is not an acceptable filetype\n",
			       globbuf.gl_pathv[i]);
			print_usage(argv);
			exit (EXIT_FAILURE);
		}else{
			fsum += ((long long) sb.st_size);
		}
	}
	printf("%lld\n", fsum);

	/* Free memory from glob_t */
	globfree(&globbuf);

	return (EXIT_SUCCESS);
}

2.4
----------------------------------------
# find -L /usr/share -xtype l | wc -l

returned: 13355

2.5
----------------------------------------
A
--------------------
# gcc -o fsum.s -Wall -g -S fsum.c

B
--------------------
The first assebly instruction is "STMFD"
In the ARM architecture, this is STMFD is used to store multiple instructions
in a full accending stack

2.6
----------------------------------------
A
--------------------
#declare variables
CC=gcc
CFLAGS=-Wall -g
SOURCES=fsum.c
EXECUTABLE=fsum

$(EXECUTABLE): $(SOURCES)
	$(CC) $(CFLAGS) $^ -o $@

clean:
	$(RM) $(EXECUTABLE)

B
--------------------
#declare variables
CC=gcc
CFLAGS=-Wall -g
SOURCES=gsum.c
EXECUTABLE=gsum

$(EXECUTABLE): $(SOURCES)
	$(CC) $(CFLAGS) $^ -o $@

clean:
	$(RM) $(EXECUTABLE)

2.7
----------------------------------------
The first step would be to notify my manager. In this case the best
starting point for my manager would be to contact the CEO and ask him or her
if they are aware of the process running and to notify them of the resources
the process is consuming and the resulting impact.
With any luck the CEO would be unaware of the amount of resource consumption
and allow for the kiling of the process.
