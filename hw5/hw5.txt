===============================================================================
Jordan Millington
Homework 5
ECE 331
Due: 02/19/2015
===============================================================================
5.1
--------------------
/*
 * zombie.c
 *
 * Program to make a zombie process that dies after roughly 10 seconds
 *
 * Jordan Millington
 * 02/17/2015
 */

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
#include<signal.h>
#include<errno.h>

int main(int argc, char *argv[])
{
	/* Declare Variables */
	pid_t child_pid = -1;
	int ret = 0;

	/* Check command line arguments */
	if (argc > 1){
		printf("USAGE: %s\n", argv[0]);
		printf("\n");
		printf("This program does not take any arguments!\n");
		exit(EXIT_FAILURE);
	}

	/* Informational purposes */
	printf("The main program process ID is: %d\n", (int) getpid());

	/* Create a child process */
	child_pid = fork();
	if (child_pid < 0){
		perror("Fork: ");
		exit(EXIT_FAILURE);
	}

	/* Parent Process */
	if (child_pid != 0){
		ret = kill(child_pid, SIGTERM);
		if (ret < 0){
			perror("Kill: ");
		}
		sleep(10);
	}
	/* Child Process */
	else{
		printf("This is the child proccess, with ID: %d\n",
		       (int) getpid());
	}

	return EXIT_SUCCESS;
}

Commands
----------
[93] 22:01 jmill-rpi:~/ece/hw5/zombie > ./zombie
The main program process ID is: 4195

[39] 21:59 jmill-rpi:~/ece/hw3 > ps -e -o pid,ppid,stat,cmd | tail -n 5
 4064     2 S    [kworker/u2:0]
 4195  2291 S+   ./zombie
 4196  4195 Z+   [zombie] <defunct>
 4197  2307 R+   ps -e -o pid,ppid,stat,cmd
 4198  2307 S+   tail -n 5

5.2
--------------------
#!/usr/bin/perl
# intelhex.pl
#
# Generate an Intel Hex Record from stdin
#
# Jordan Millington
# 02/17/2015
use Encode;
# Read Input from STDIN
while (<>){
	chomp;
	push @dat, unpack('H*',$_);
}
# Build record
for $i (0 .. $#dat){
	$len = length(Encode::encode_utf8($dat[$i]));
	# <ByteLength><Offset><TYPE><Data>
	$str = sprintf("%02X%04X00$dat[$i]",$len,$i);
	$tmp = pack('H*', $str);
	$chksm = unpack('%8C*',$tmp);
	printf ":$str%02X\r\n",(-$chksm & 0xFF);
}
# Termination Record
printf(":00000001FF\r\n");

5.3
--------------------
** Did not sucessfully reboot

aptitude search 'raspberrypi*'
aptitude search 'linux-*'
aptitude search 'linux-*' | less
sudo apt-get remove raspberrypi-bootloader
dpkg -l 'raspberrypi*'
dpkg -l 'libraspberrypi*'
sudo rpi-update
cd /usr/src
sudo git clone --depth=1 git://github.com/raspberrypi/linux.git
make mrproper
cd
mkdir tmp
cd tmp
sudo zcat /proc/config.gz > .config
sudo cp .config /usr/src/linux
cd /usr/src/linux
sudo make oldconfig
sudo make menuconfig
sudo make
sudo make modules
sudo make modules_install
cd /usr/src/linux/arch/arm
ls
cd Image
ls
cp zImage /boot/kernel.img
find '*.dtb'
find -name '*.dtb'
cd linux/arch/arm/boot/dts
find -name '*.dtb' -exec cp '{}' /boot/ \;
sudo shutdown -r now

5.4
--------------------
/\b[+-]?([0-9]+\.([0-9]+)?|\.[0-9]+)[eE][+-]?[0-9]+\b/

5.5
--------------------
Did and Done

5.6
--------------------
[109] 22:40 jmill-rpi:~ > sudo adduser jmillington
Adding user `jmillington' ...
Adding new group `jmillington' (1004) ...
Adding new user `jmillington' (1001) with group `jmillington' ...
Creating home directory `/home/jmillington' ...
Copying files from `/etc/skel' ...
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
Changing the user information for jmillington
Enter the new value, or press ENTER for the default
        Full Name []: Jordan Millington
        Room Number []:
        Work Phone []:
        Home Phone []:
        Other []:
Is the information correct? [Y/n] y

5.7
--------------------
** Incomplete

/*
 * caps.c
 *
 * Program to have child print input string in all caps 
 *
 * Jordan Millington
 * 02/17/2015
 */

#include<stdio.h>
#include<stdlib.h>
#include<sys/types.h>
#include<unistd.h>
#include<signal.h>
#include<errno.h>
#include<fcntl.h>
#include<sys/wait.h>
#include<string.h>
#include<regex.h>

int main(int argc, char *argv[])
{
	/* Declare Variables */
	int pipefd[2] = {0};
	pid_t child_pid = -1;
	int ret = 0;
	char buf = NULL;
	char line[4096] = {NULL};
	regex_t re;
	regmatch_t rm[256];

	/* Check command line arguments */
	if (argc != 2){
		printf("USAGE: %s <string>\n", argv[0]);
		printf("\n");
		exit(EXIT_FAILURE);
	}

	/* Pipe */
	if (pipe(pipefd) == -1){
		perror("pipe");
		exit(EXIT_FAILURE);
	}

	/* Create a child process */
	child_pid = fork();
	if (child_pid < 0){
		perror("Fork: ");
		exit(EXIT_FAILURE);
	}

	/* Parent Process */
	if (child_pid != 0){
		ret = regcomp(&re, "/\bquit\b | \bexit\b | \bbye\b/",
			      REG_ICASE);
		while(!feof(stdin)){
			fgets(line,4096,stdin);

		ret = kill(child_pid, SIGTERM);
		if (ret < 0){
			perror("Kill: ");
		}
		sleep(10);
	}
	/* Child Process */
	else{
		printf("This is the child proccess, with ID: %d\n",
		       (int) getpid());
	}

	return EXIT_SUCCESS;
}
