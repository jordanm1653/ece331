#!/usr/bin/python

# gtktemp
#
# print temperature when the button is clicked
# 
# Code skeleton and gtk portions are
#  from http://www.pygtk.org/pygtk2tutorial/

import pygtk
pygtk.require('2.0')
import gtk
import struct                                                                   
import smbus                                                                    
from collections import namedtuple                                              
                                                                                
bus = smbus.SMBus(1)    # 1 = /dev/i2c-1                                        
                                                                                
#                                                                               
# i2c Address of xmega                                                          
#                                                                               
addr = 0x41

class HelloWorld:

    # This is a callback function. The data arguments are ignored
    # in this example. More on callbacks below.
    def gettemp(self, widget, data=None):
		try:                                                                            
		    data = bus.read_i2c_block_data(addr,0x00,10)                                
		except IOError:                                                                 
		    print "unable to read from i2c bus"                                         
		                                                                                
		#                                                                               
		# Format data from i2c read                                                     
		#                                                                               
		buff= struct.unpack('<HHHHBB', struct.pack('BBBBBBBBBB', *data))                
		                                                                                
		#                                                                               
		# Create dictionary from i2c data                                               
		#                                                                               
		keys = ['roomcal','hotcal','adcal','v','room','hot']                            
		temp_t = dict(zip(keys, buff))                                                  
		                                                                                
		temp_f  = (temp_t['v'] * 55 / 181) - 602.94
		print 'The Temperature is: %d degrees F' % temp_f

    def delete_event(self, widget, event, data=None):
        # If you return FALSE in the "delete_event" signal handler,
        # GTK will emit the "destroy" signal. Returning TRUE means
        # you don't want the window to be destroyed.
        # This is useful for popping up 'are you sure you want to quit?'
        # type dialogs.
        print "delete event occurred"

        # Change FALSE to TRUE and the main window will not be destroyed
        # with a "delete_event".
        return False

    # Another callback
    def destroy(self, widget, data=None):
        gtk.main_quit()

    def __init__(self):
        # create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        # When the window is given the "delete_event" signal (this is given
        # by the window manager, usually by the "close" option, or on the
        # titlebar), we ask it to call the delete_event () function
        # as defined above. The data passed to the callback
        # function is NULL and is ignored in the callback function.
        self.window.connect("delete_event", self.delete_event)

        # Here we connect the "destroy" event to a signal handler.
        # This event occurs when we call gtk_widget_destroy() on the window,
        # or if we return FALSE in the "delete_event" callback.
        self.window.connect("destroy", self.destroy)

        # Sets the border width of the window.
        self.window.set_border_width(10)

        # Creates a new button with the label "Get Temperature".
        self.button = gtk.Button("Get Temperature")

        # When the button receives the "clicked" signal, it will call the
        # function gettemp() passing it None as its argument.  The gettemp()
        # function is defined above.
        self.button.connect("clicked", self.gettemp, None)

        # This will cause the window to be destroyed by calling
        # gtk_widget_destroy(window) when "clicked".  Again, the destroy
        # signal could come from here, or the window manager.
        self.button.connect_object("clicked", gtk.Widget.destroy, self.window)

        # This packs the button into the window (a GTK container).
        self.window.add(self.button)

        # The final step is to display this newly created widget.
        self.button.show()

        # and the window
        self.window.show()

    def main(self):
        gtk.main()

if __name__ == "__main__":
    hello = HelloWorld()
    hello.main()
